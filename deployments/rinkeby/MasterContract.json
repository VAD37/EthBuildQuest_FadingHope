{
  "address": "0xA0B434f834b7fa9CD4d28923E6f56a9035F52604",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "kingdomName",
          "type": "string"
        }
      ],
      "name": "freeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kingdomNFT",
      "outputs": [
        {
          "internalType": "contract IKingdom",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKingdom",
          "name": "_kingdomNFT",
          "type": "address"
        }
      ],
      "name": "setKingdomNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x90bc50e5e982b0cd69d6cc5a315422c56b7b3f7d56a3161e05981a6299232582",
  "receipt": {
    "to": null,
    "from": "0x9c9242F46692c0D3d262Cc3247c33359755Fd228",
    "contractAddress": "0xA0B434f834b7fa9CD4d28923E6f56a9035F52604",
    "transactionIndex": 8,
    "gasUsed": "621657",
    "logsBloom": "0x
    "blockHash": "0xcdf392d19d30df2b0b48302bc3c8652d6bfb7bb05d811e2576210ac3eef387f3",
    "transactionHash": "0x90bc50e5e982b0cd69d6cc5a315422c56b7b3f7d56a3161e05981a6299232582",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 10283003,
        "transactionHash": "0x90bc50e5e982b0cd69d6cc5a315422c56b7b3f7d56a3161e05981a6299232582",
        "address": "0xA0B434f834b7fa9CD4d28923E6f56a9035F52604",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009c9242f46692c0d3d262cc3247c33359755fd228"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xcdf392d19d30df2b0b48302bc3c8652d6bfb7bb05d811e2576210ac3eef387f3"
      }
    ],
    "blockNumber": 10283003,
    "cumulativeGasUsed": "4778340",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "b978d9effa530cd594f696129e0528ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"kingdomName\",\"type\":\"string\"}],\"name\":\"freeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kingdomNFT\",\"outputs\":[{\"internalType\":\"contract IKingdom\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKingdom\",\"name\":\"_kingdomNFT\",\"type\":\"address\"}],\"name\":\"setKingdomNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Store most of logic here. It is the best that master contract only have logic and not store storage.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterContract.sol\":\"MasterContract\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/MasterContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IMaster.sol\\\";\\nimport \\\"./interfaces/IKingdom.sol\\\";\\n\\n/// This master contract have size limit. So split logic of factory to their own file.\\n/// This should implement diamond/facet storage contract but it was too complicated for hackathon.\\n/// So this contract will handle most of logic in game without modular code.\\n\\n/// Store most of logic here.\\n/// It is the best that master contract only have logic and not store storage.\\n\\ncontract MasterContract is Ownable { // , IMaster {\\n\\n    IKingdom public  kingdomNFT;\\n\\n    function setKingdomNFT(IKingdom _kingdomNFT) external onlyOwner() {\\n        kingdomNFT = _kingdomNFT;\\n    }\\n\\n    function freeMint(address _to, string memory kingdomName) external {\\n        kingdomNFT.mint(_to, kingdomName);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xa04e79bccae907bfb7bc4d9868d6ddb2090dccd214dab56b5efdf94ae5e303ed\",\"license\":\"MIT\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/// Factory for mint new contracts\\n/// Factory should store unique ID for minted contract.\\n/// Storing on master logic contract cause duplication code.\\n/// Get playerID, unitID, will go through factory book instead of master.\\n\\ninterface IFactory {\\n    // mint\\n    function mintNFT(address owner, string memory id) external returns (address);\\n\\n    // convert string to bytes32 by hash sha256 and revert will be handle on frontend part\\n    // Also NFT should store original string id on contract too. For easier reading.\\n    function getNFTbyID(bytes32 id) external view returns (address nftAddress);\\n\\n    /// Since ENS rely on subgrapth to convert bytes32 to string. We cannot do the same.\\n    /// We simply store all string id on contract. Then call NFT view function to get ID. After to get the NFTs address from id\\n    /// So 2 call from ID to get real name\\n    function getNFTname(address nftAddress) external view returns (string memory);\\n\\n    function getNFTNameFromID(bytes32 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x1bd45fe348068f3376f54e9e7011418a59c90025649bf03d20b198a472f58dd9\"},\"contracts/interfaces/IKingdom.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/// Player Kingdom NFT interface\\n/// Hold storage: level of building\\n/// Kindom should be a NFT token have unique owner and share authority with master\\ninterface IKingdom {\\n    \\n    function mint(address to, string memory kingdomName) external;\\n    \\n\\n    function getName(uint tokenID) external view returns (string memory);\\n    function getRuler(uint tokenID) external view returns (address);\\n\\n    // call master contract to mint owner money based on their kingdom level.\\n    function claimReward(uint tokenID) external;\\n\\n    // call master contract to burn owner token to exchange for upgrade.\\n    // should only be called by master contract and by owner\\n    function upgradeBuilding(uint tokenID,uint256 _buildingId) external;\\n\\n    function getBuildingLevel(uint256 tokenID,uint256 _buildingId) external view returns (uint256);\\n    function getBuildingsLevel(uint256 tokenID,uint256[] calldata _buildingId) external view returns (uint256[] memory);\\n\\n\\n    function getTokenURI (uint256 tokenId, bytes32 uri) external view returns (string memory) ;\\n    function getTokenURIs (uint256 tokenId, bytes32[] calldata uriList) external view returns (string[] memory) ;\\n    // called by invader or master.\\n    function destroyKingdom(uint tokenID) external;\\n\\n    function setTokenURI (uint256 tokenId, bytes32 uri, string memory data) external;\\n    function setTokenURIs (uint256 tokenId, bytes32[] calldata uri, string[] calldata data) external;\\n    \\n}\\n\",\"keccak256\":\"0x7722523e4bd5789d5aeb58d9c4ac2884bb9c0d3527000077e44980f3daef6e79\"},\"contracts/interfaces/IMaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IKingdom.sol\\\";\\nimport \\\"./IFactory.sol\\\";\\nimport \\\"./IPersonalization.sol\\\";\\nimport \\\"./IUnit.sol\\\";\\n\\n/// Handle most logic of the game.\\n/// Storage will be store NFT. And NFT just redirect most function authority to master.\\n/// Master must have write access to NFT storage to apply change.\\n/// master should have no need to know about current status of NFT or who is the owner.\\n/// Master should only have pure logic, change storage of input NFT.\\n/// It much simpler if we design contract this way\\ninterface IMaster {\\n/// Mint\\n    function MintPlayerKingdom(address player, bytes32 name) external returns (IKingdom);\\n    function MintNewUnit(IKingdom kingdom, bytes32 name) external returns (IUnit);\\n\\n    /// Function for frontend check before mint\\n    function IsNameExist(bytes32 name) external returns (bool);\\n\\n    function IsUnitExist(bytes32 name) external returns (bool);\\n\\n\\n\\n/// Logic gameplay function\\n    function ClaimKingdomReward(IKingdom kingdom) external;\\n\\n    function BurnKingdom(IKingdom kingdom) external;\\n\\n    function AttackKingdom(IKingdom from, IKingdom target) external;\\n}\\n\",\"keccak256\":\"0x2dc1acb592ad46b5f886648922907b698c4519385f788dc84366997ea6ea144a\",\"license\":\"MIT\"},\"contracts/interfaces/IPersonalization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// allow store, get special metadata on smart contract\\n/// On how mapping work, bytes32 of keccak256(string key) is used as key for cheaper operation.\\n/// Frontend will have to convert key to readable format by have a dictionary of possible key to read data\\ninterface IPersonalization {\\n    event NewMetaData(bytes32 key, string value);\\n\\n    /// get the metadata\\n    function getMetadata(bytes32 key) external view returns (string memory);\\n\\n    /// set the metadata\\n    function setMetadata(bytes32 key, string memory _metadata) external;\\n}\\n\",\"keccak256\":\"0x1c396b7331cab6322edc059b181eafe03559ba6dadeaed42290f663a77985f98\",\"license\":\"MIT\"},\"contracts/interfaces/IUnit.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/// Army archetype.\\n/// suppose to be IERC721\\n/// only creator, owner can mint new troops.\\n/// ERC721 alllow this token to be transfered, traded.\\ninterface IUnit {\\n\\n}\\n\",\"keccak256\":\"0x8030c7c4dea3c6ea46ae1e873dad7e83b0bee4c75986420cf364665bb216d567\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6109d38061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063711112be14610067578063715018a6146100835780638da5cb5b1461008d578063b63f75f8146100ab578063ea219e1f146100c9578063f2fde38b146100e5575b600080fd5b610081600480360381019061007c91906105aa565b610101565b005b61008b610194565b005b61009561021c565b6040516100a291906106c4565b60405180910390f35b6100b3610245565b6040516100c0919061070f565b60405180910390f35b6100e360048036038101906100de91906105fe565b61026b565b005b6100ff60048036038101906100fa9190610581565b61032b565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0def52183836040518363ffffffff1660e01b815260040161015e9291906106df565b600060405180830381600087803b15801561017857600080fd5b505af115801561018c573d6000803e3d6000fd5b505050505050565b61019c610423565b73ffffffffffffffffffffffffffffffffffffffff166101ba61021c565b73ffffffffffffffffffffffffffffffffffffffff1614610210576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102079061074a565b60405180910390fd5b61021a600061042b565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610273610423565b73ffffffffffffffffffffffffffffffffffffffff1661029161021c565b73ffffffffffffffffffffffffffffffffffffffff16146102e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102de9061074a565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610333610423565b73ffffffffffffffffffffffffffffffffffffffff1661035161021c565b73ffffffffffffffffffffffffffffffffffffffff16146103a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039e9061074a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040e9061072a565b60405180910390fd5b6104208161042b565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006105026104fd8461078f565b61076a565b90508281526020810184848401111561051a57600080fd5b610525848285610844565b509392505050565b60008135905061053c8161096f565b92915050565b60008135905061055181610986565b92915050565b600082601f83011261056857600080fd5b81356105788482602086016104ef565b91505092915050565b60006020828403121561059357600080fd5b60006105a18482850161052d565b91505092915050565b600080604083850312156105bd57600080fd5b60006105cb8582860161052d565b925050602083013567ffffffffffffffff8111156105e857600080fd5b6105f485828601610557565b9150509250929050565b60006020828403121561061057600080fd5b600061061e84828501610542565b91505092915050565b610630816107dc565b82525050565b61063f81610820565b82525050565b6000610650826107c0565b61065a81856107cb565b935061066a818560208601610853565b610673816108e6565b840191505092915050565b600061068b6026836107cb565b9150610696826108f7565b604082019050919050565b60006106ae6020836107cb565b91506106b982610946565b602082019050919050565b60006020820190506106d96000830184610627565b92915050565b60006040820190506106f46000830185610627565b81810360208301526107068184610645565b90509392505050565b60006020820190506107246000830184610636565b92915050565b600060208201905081810360008301526107438161067e565b9050919050565b60006020820190508181036000830152610763816106a1565b9050919050565b6000610774610785565b90506107808282610886565b919050565b6000604051905090565b600067ffffffffffffffff8211156107aa576107a96108b7565b5b6107b3826108e6565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b60006107e782610800565b9050919050565b60006107f9826107dc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061082b82610832565b9050919050565b600061083d82610800565b9050919050565b82818337600083830152505050565b60005b83811015610871578082015181840152602081019050610856565b83811115610880576000848401525b50505050565b61088f826108e6565b810181811067ffffffffffffffff821117156108ae576108ad6108b7565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610978816107dc565b811461098357600080fd5b50565b61098f816107ee565b811461099a57600080fd5b5056fea2646970667358221220aa61611bcb2b97f94045a41dc4f34b0e9c37ee7d759b52568ad4e45f1e218c3f64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063711112be14610067578063715018a6146100835780638da5cb5b1461008d578063b63f75f8146100ab578063ea219e1f146100c9578063f2fde38b146100e5575b600080fd5b610081600480360381019061007c91906105aa565b610101565b005b61008b610194565b005b61009561021c565b6040516100a291906106c4565b60405180910390f35b6100b3610245565b6040516100c0919061070f565b60405180910390f35b6100e360048036038101906100de91906105fe565b61026b565b005b6100ff60048036038101906100fa9190610581565b61032b565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0def52183836040518363ffffffff1660e01b815260040161015e9291906106df565b600060405180830381600087803b15801561017857600080fd5b505af115801561018c573d6000803e3d6000fd5b505050505050565b61019c610423565b73ffffffffffffffffffffffffffffffffffffffff166101ba61021c565b73ffffffffffffffffffffffffffffffffffffffff1614610210576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102079061074a565b60405180910390fd5b61021a600061042b565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610273610423565b73ffffffffffffffffffffffffffffffffffffffff1661029161021c565b73ffffffffffffffffffffffffffffffffffffffff16146102e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102de9061074a565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610333610423565b73ffffffffffffffffffffffffffffffffffffffff1661035161021c565b73ffffffffffffffffffffffffffffffffffffffff16146103a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039e9061074a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040e9061072a565b60405180910390fd5b6104208161042b565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006105026104fd8461078f565b61076a565b90508281526020810184848401111561051a57600080fd5b610525848285610844565b509392505050565b60008135905061053c8161096f565b92915050565b60008135905061055181610986565b92915050565b600082601f83011261056857600080fd5b81356105788482602086016104ef565b91505092915050565b60006020828403121561059357600080fd5b60006105a18482850161052d565b91505092915050565b600080604083850312156105bd57600080fd5b60006105cb8582860161052d565b925050602083013567ffffffffffffffff8111156105e857600080fd5b6105f485828601610557565b9150509250929050565b60006020828403121561061057600080fd5b600061061e84828501610542565b91505092915050565b610630816107dc565b82525050565b61063f81610820565b82525050565b6000610650826107c0565b61065a81856107cb565b935061066a818560208601610853565b610673816108e6565b840191505092915050565b600061068b6026836107cb565b9150610696826108f7565b604082019050919050565b60006106ae6020836107cb565b91506106b982610946565b602082019050919050565b60006020820190506106d96000830184610627565b92915050565b60006040820190506106f46000830185610627565b81810360208301526107068184610645565b90509392505050565b60006020820190506107246000830184610636565b92915050565b600060208201905081810360008301526107438161067e565b9050919050565b60006020820190508181036000830152610763816106a1565b9050919050565b6000610774610785565b90506107808282610886565b919050565b6000604051905090565b600067ffffffffffffffff8211156107aa576107a96108b7565b5b6107b3826108e6565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b60006107e782610800565b9050919050565b60006107f9826107dc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061082b82610832565b9050919050565b600061083d82610800565b9050919050565b82818337600083830152505050565b60005b83811015610871578082015181840152602081019050610856565b83811115610880576000848401525b50505050565b61088f826108e6565b810181811067ffffffffffffffff821117156108ae576108ad6108b7565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610978816107dc565b811461098357600080fd5b50565b61098f816107ee565b811461099a57600080fd5b5056fea2646970667358221220aa61611bcb2b97f94045a41dc4f34b0e9c37ee7d759b52568ad4e45f1e218c3f64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Store most of logic here. It is the best that master contract only have logic and not store storage.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MasterContract.sol:MasterContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 137,
        "contract": "contracts/MasterContract.sol:MasterContract",
        "label": "kingdomNFT",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IKingdom)303"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IKingdom)303": {
        "encoding": "inplace",
        "label": "contract IKingdom",
        "numberOfBytes": "20"
      }
    }
  }
}