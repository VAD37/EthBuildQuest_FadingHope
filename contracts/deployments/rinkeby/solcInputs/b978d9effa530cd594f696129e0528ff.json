{
  "language": "Solidity",
  "sources": {
    "contracts/MasterContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IMaster.sol\";\nimport \"./interfaces/IKingdom.sol\";\n\n/// This master contract have size limit. So split logic of factory to their own file.\n/// This should implement diamond/facet storage contract but it was too complicated for hackathon.\n/// So this contract will handle most of logic in game without modular code.\n\n/// Store most of logic here.\n/// It is the best that master contract only have logic and not store storage.\n\ncontract MasterContract is Ownable { // , IMaster {\n\n    IKingdom public  kingdomNFT;\n\n    function setKingdomNFT(IKingdom _kingdomNFT) external onlyOwner() {\n        kingdomNFT = _kingdomNFT;\n    }\n\n    function freeMint(address _to, string memory kingdomName) external {\n        kingdomNFT.mint(_to, kingdomName);\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/IMaster.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IKingdom.sol\";\nimport \"./IFactory.sol\";\nimport \"./IPersonalization.sol\";\nimport \"./IUnit.sol\";\n\n/// Handle most logic of the game.\n/// Storage will be store NFT. And NFT just redirect most function authority to master.\n/// Master must have write access to NFT storage to apply change.\n/// master should have no need to know about current status of NFT or who is the owner.\n/// Master should only have pure logic, change storage of input NFT.\n/// It much simpler if we design contract this way\ninterface IMaster {\n/// Mint\n    function MintPlayerKingdom(address player, bytes32 name) external returns (IKingdom);\n    function MintNewUnit(IKingdom kingdom, bytes32 name) external returns (IUnit);\n\n    /// Function for frontend check before mint\n    function IsNameExist(bytes32 name) external returns (bool);\n\n    function IsUnitExist(bytes32 name) external returns (bool);\n\n\n\n/// Logic gameplay function\n    function ClaimKingdomReward(IKingdom kingdom) external;\n\n    function BurnKingdom(IKingdom kingdom) external;\n\n    function AttackKingdom(IKingdom from, IKingdom target) external;\n}\n"
    },
    "contracts/interfaces/IKingdom.sol": {
      "content": "pragma solidity ^0.8.0;\n\n/// Player Kingdom NFT interface\n/// Hold storage: level of building\n/// Kindom should be a NFT token have unique owner and share authority with master\ninterface IKingdom {\n    \n    function mint(address to, string memory kingdomName) external;\n    \n\n    function getName(uint tokenID) external view returns (string memory);\n    function getRuler(uint tokenID) external view returns (address);\n\n    // call master contract to mint owner money based on their kingdom level.\n    function claimReward(uint tokenID) external;\n\n    // call master contract to burn owner token to exchange for upgrade.\n    // should only be called by master contract and by owner\n    function upgradeBuilding(uint tokenID,uint256 _buildingId) external;\n\n    function getBuildingLevel(uint256 tokenID,uint256 _buildingId) external view returns (uint256);\n    function getBuildingsLevel(uint256 tokenID,uint256[] calldata _buildingId) external view returns (uint256[] memory);\n\n\n    function getTokenURI (uint256 tokenId, bytes32 uri) external view returns (string memory) ;\n    function getTokenURIs (uint256 tokenId, bytes32[] calldata uriList) external view returns (string[] memory) ;\n    // called by invader or master.\n    function destroyKingdom(uint tokenID) external;\n\n    function setTokenURI (uint256 tokenId, bytes32 uri, string memory data) external;\n    function setTokenURIs (uint256 tokenId, bytes32[] calldata uri, string[] calldata data) external;\n    \n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IFactory.sol": {
      "content": "pragma solidity ^0.8.0;\n\n/// Factory for mint new contracts\n/// Factory should store unique ID for minted contract.\n/// Storing on master logic contract cause duplication code.\n/// Get playerID, unitID, will go through factory book instead of master.\n\ninterface IFactory {\n    // mint\n    function mintNFT(address owner, string memory id) external returns (address);\n\n    // convert string to bytes32 by hash sha256 and revert will be handle on frontend part\n    // Also NFT should store original string id on contract too. For easier reading.\n    function getNFTbyID(bytes32 id) external view returns (address nftAddress);\n\n    /// Since ENS rely on subgrapth to convert bytes32 to string. We cannot do the same.\n    /// We simply store all string id on contract. Then call NFT view function to get ID. After to get the NFTs address from id\n    /// So 2 call from ID to get real name\n    function getNFTname(address nftAddress) external view returns (string memory);\n\n    function getNFTNameFromID(bytes32 id) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/IPersonalization.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// allow store, get special metadata on smart contract\n/// On how mapping work, bytes32 of keccak256(string key) is used as key for cheaper operation.\n/// Frontend will have to convert key to readable format by have a dictionary of possible key to read data\ninterface IPersonalization {\n    event NewMetaData(bytes32 key, string value);\n\n    /// get the metadata\n    function getMetadata(bytes32 key) external view returns (string memory);\n\n    /// set the metadata\n    function setMetadata(bytes32 key, string memory _metadata) external;\n}\n"
    },
    "contracts/interfaces/IUnit.sol": {
      "content": "pragma solidity ^0.8.0;\n\n/// Army archetype.\n/// suppose to be IERC721\n/// only creator, owner can mint new troops.\n/// ERC721 alllow this token to be transfered, traded.\ninterface IUnit {\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}